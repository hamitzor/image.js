(()=>{"use strict";var t,e=function(){function t(t,e,n,r){if(void 0===n&&(n=1),this.channelNumber=n,this.width=t,this.height=e,Array.isArray(r)){if(r.length!==t*e*n)throw new Error("Given pixel array does not match the dimension and the channel count.");this.pixels=r}else this.pixels=new Array(t*e*n).fill(r||0)}return t.fromImageData=function(e,n){void 0===n&&(n=1);var r=new Array(e.width*e.height*n);if(n<2)for(var o=function(t){r[t]=[0,1,2].reduce((function(n,r){return n+e.data[4*t+r]}),0)/3},i=0;i<e.width*e.height;i++)o(i);else for(i=0;i<e.width*e.height;i++)for(var s=0;s<n&&s<3;s++)r[i*n+s]=e.data[4*i+s];return new t(e.width,e.height,n,r)},t.prototype.max=function(){return this.pixels.reduce((function(t,e){return t>e?t:e}))},t.prototype.get=function(t,e,n){return void 0===n&&(n=0),this.pixels[(t*this.width+e)*this.channelNumber+n]},t.prototype.set=function(t,e,n,r){void 0===r&&(r=0),this.pixels[(t*this.width+e)*this.channelNumber+r]=n},t.prototype.toImageData=function(){for(var t=new Uint8ClampedArray(this.width*this.height*4),e=0;e<this.width*this.height;e++)t[4*e]=this.pixels[e*this.channelNumber],t[4*e+1]=this.pixels[e*this.channelNumber+(this.channelNumber>1?1:0)],t[4*e+2]=this.pixels[e*this.channelNumber+(this.channelNumber>1?2:0)],t[4*e+3]=255;return new ImageData(t,this.width,this.height)},t.prototype.clone=function(){return new t(this.width,this.height,this.channelNumber,this.pixels.map((function(t){return t})))},t.prototype.toGrayScale=function(){if(this.channelNumber<2)return this.clone();for(var e=new Array(this.width*this.height).fill(0),n=0;n<this.width*this.height;n++){for(var r=0;r<this.channelNumber;r++)e[n]+=this.pixels[n*this.channelNumber+r];e[n]/=this.channelNumber}return new t(this.width,this.height,1,e)},t.prototype.toMultiChannel=function(e){if(this.channelNumber>1)throw new Error("Image is already multi channel");for(var n=new Array(this.width*this.height*e),r=0;r<this.width*this.height;r++)for(var o=0;o<e;o++)n[r*e+o]=this.pixels[r];return new t(this.width,this.height,e,n)},t}(),n=function(){function t(t,e,n){if("number"==typeof t){if("number"!=typeof e)throw new Error("Bad parameters for the constructor.");this.rows=t,this.cols=e,this.data=Array.isArray(n)?n:new Array(t*e).fill(n)}else r=t,Array.isArray(r)&&Array.isArray(r[0])&&(this.cols=t.length,this.rows=t[0].length,this.data=t.reduce((function(t,e){return t.concat(e)}),[]));var r}return t.prototype.get=function(t,e){return this.data[t*this.cols+e]},t.prototype.set=function(t,e,n){this.data[t*this.cols+e]=n},t.prototype.toString=function(){var t="";t+="Matrix ("+this.rows+", "+this.cols+"):";for(var e=0;e<this.rows;e++){t+="\n";for(var n=0;n<this.cols;n++)t+=this.get(e,n)+"\t"}return t},t.prototype.transpose=function(){for(var t=Array(this.rows*this.cols),e=0;e<this.rows;e++)for(var n=0;n<this.cols;n++)t[n*this.rows+e]=this.get(e,n);var r=this.rows;return this.rows=this.cols,this.cols=r,this.data=t,this},t}(),r=function(t,e){return void 0===e&&(e=0),e+Math.floor(Math.random()*Math.floor(t))},o=(t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)},function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}),i=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return o(n,t),n.prototype.run=function(t){var n=this;return new Promise((function(r,o){try{for(var i=new e(t.width,t.height,t.channelNumber),s=0;s<i.height;s++)for(var a=0;a<i.width;a++)for(var p=0;p<n.rows;p++)for(var u=0;u<n.cols;u++)for(var h=0;h<t.channelNumber;h++){var c=t.get(s-((n.rows-1)/2-p),a-((n.cols-1)/2-u),h);c=c||0,i.set(s,a,i.get(s,a,h)+c*n.get(p,u),h)}r(i)}catch(t){o(t)}}))},n}(n),s=function(){function t(t){this.opts={sigma:1,n:5},t&&this.setOpts(t),this.updateFilter()}return t.prototype.setOpts=function(t){if(void 0!==t.n&&("number"!=typeof t.n||t.n<3||t.n%2==0))throw new Error("Kernel size should be an odd number greater than 3");if(void 0!==t.sigma&&t.sigma<=0)throw new Error("Sigma should be a positive real number");this.opts=Object.assign(this.opts,t),this.updateFilter()},t.prototype.updateFilter=function(){var t=this,e=Array.from({length:this.opts.n},(function(){return new Array(t.opts.n).fill(0)})),n=Array.from({length:this.opts.n},(function(e,n){return function(t,e){return void 0===e&&(e=1),1/(e*Math.sqrt(2*Math.PI))*Math.exp(-.5*Math.pow(t/e,2))}(n*(4/(t.opts.n-1))-2,t.opts.sigma)})),r=n.reduce((function(t,e){return t+e}),0);n=n.map((function(t){return t/r}));for(var o=0;o<this.opts.n;o++)for(var s=0;s<this.opts.n;s++)e[o][s]=n[o]*n[s];this.filter=new i(e)},t.prototype.run=function(t){return this.filter.run(t)},t}(),a=function(){function t(){this.dxFilter=new i([[1,0,-1],[2,0,-2],[1,0,-1]])}return t.prototype.run=function(t){return t.channelNumber>1&&(t=t.toGrayScale()),Promise.all([this.dxFilter.run(t),this.dxFilter.transpose().run(t)]).then((function(n){for(var r=n[0],o=n[1],i=new e(t.width,t.height),s=new e(t.width,t.height),a=0;a<t.height;a++)for(var p=0;p<t.width;p++)s.set(a,p,Math.atan2(o.get(a,p),r.get(a,p))),i.set(a,p,Math.sqrt(Math.pow(o.get(a,p),2)+Math.pow(r.get(a,p),2)));return{g:i,theta:s}}))},t}(),p=function(){function t(t){this.opts={lowThresholdRatio:.2,highThresholdRatio:.5,gaussianBlurOpts:{n:5,sigma:1}},t&&this.setOpts(t)}return t.prototype.setOpts=function(t){if(t.gaussianBlurOpts&&(this.opts.gaussianBlurOpts=Object.assign(this.opts.gaussianBlurOpts,t.gaussianBlurOpts),delete t.gaussianBlurOpts),this.opts=Object.assign(this.opts,t),"number"!=typeof this.opts.lowThresholdRatio||"number"!=typeof this.opts.highThresholdRatio)throw new Error("High and low threshold values should be real numbers between 0 and 1");if(this.opts.lowThresholdRatio>=this.opts.highThresholdRatio)throw new Error("Low threshold value should be smaller than high threshold value.")},t.prototype.nonMaximumSuppression=function(t,n){for(var r=new e(t.width,t.height),o=2;o<r.height-2;o++)for(var i=2;i<r.width-2;i++){var s=255,a=255,p=180*n.get(o,i)/Math.PI;p<0&&(p+=180),0<=p&&p<22.5||157.5<=p&&p<=180?(s=t.get(o,i+1),a=t.get(o,i-1)):22.5<=p&&p<67.5?(s=t.get(o+1,i+1),a=t.get(o-1,i-1)):67.5<=p&&p<112.5?(s=t.get(o+1,i),a=t.get(o-1,i)):112.5<=p&&p<157.5&&(s=t.get(o-1,i+1),a=t.get(o+1,i-1)),t.get(o,i)>=s&&t.get(o,i)>=a?r.set(o,i,t.get(o,i)):r.set(o,i,0)}return r},t.prototype.threshold=function(e,n,r){for(var o=e.clone(),i=2;i<o.height-2;i++)for(var s=2;s<o.width-2;s++){var a=o.get(i,s);a<n?o.set(i,s,0):a<r?o.set(i,s,t.WEAK):o.set(i,s,t.STRONG)}return o},t.prototype.hysteresis=function(e){for(var n=2;n<e.height-2;n++)for(var r=2;r<e.width-2;r++)e.get(n,r)===t.WEAK&&(e.get(n-1,r-1)===t.STRONG||e.get(n-1,r)===t.STRONG||e.get(n-1,r+1)===t.STRONG||e.get(n,r-1)===t.STRONG||e.get(n,r+1)===t.STRONG||e.get(n+1,r-1)===t.STRONG||e.get(n+1,r)===t.STRONG||e.get(n+1,r+1)===t.STRONG?e.set(n,r,t.STRONG):e.set(n,r,0));return e},t.prototype.run=function(t){var e=this;return new s(this.opts.gaussianBlurOpts).run(t).then((function(t){return(new a).run(t)})).then((function(n){var r=n.g,o=n.theta,i=t.max()*e.opts.highThresholdRatio,s=i*e.opts.lowThresholdRatio;return e.hysteresis(e.threshold(e.nonMaximumSuppression(r,o),s,i))}))},t}();!function(t){t.WEAK=100,t.STRONG=255}(p||(p={}));var u=function(){function t(t){this.opts={maxIterations:0,clusterNumber:2},t&&this.setOpts(t)}return t.prototype.setOpts=function(t){this.opts=Object.assign(this.opts,t)},t.prototype.run=function(t){var e=this;return new Promise((function(n,o){try{for(var i=Array.from({length:e.opts.clusterNumber},(function(){return new Array(t.dimensionNumber).fill(0)})),s=new Array(t.length).fill(0),a=0,p=0,u=0,h=[],c=function(){var e=r(t.length-1);h.filter((function(n){return n.map((function(n,r){return n-t.get(e,r)})).filter((function(t){return 0===t})).length===n.length})).length<1&&(i[h.length]=i[h.length].map((function(n,r){return t.get(e,r)})),h.push(i[h.length]))};h.length<e.opts.clusterNumber;)c();do{for(var l=!1,d=0;d<t.length;d++){for(var g=0,m=1/0,y=0;y<i.length;y++){for(var f=0,E=0;E<t.dimensionNumber;E++)f+=Math.pow(i[y][E]-t.get(d,E),2);(f=Math.sqrt(f))<m&&(m=f,g=y)}l||s[d]===g||(l=!0),s[d]=g}l?u=0:u++;var w=Array.from({length:e.opts.clusterNumber},(function(){return new Array(t.dimensionNumber).fill(0)}));for(d=0;d<t.length;d++)for(E=0;E<t.dimensionNumber;E++)w[s[d]][E]+=t.get(d,E);w=w.map((function(t,e){return t.map((function(t){return t/s.filter((function(t){return t===e})).length}))}));for(var I=!1,v=0;v<i.length;v++)for(E=0;E<t.dimensionNumber;E++)i[v][E]!==w[v][E]&&(i[v][E]=w[v][E],I=!0);I?p=0:p++,a++}while(!(p>2||u>2||0!==e.opts.maxIterations&&a>e.opts.maxIterations));n({clusters:s,centroids:i})}catch(t){o(t)}}))},t}(),h=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),c=function(t){function e(e){return t.call(this,e.width,e.height,e.channelNumber,e.pixels)||this}return h(e,t),e.prototype.get=function(t,e){return this.pixels[t*this.channelNumber+e]},Object.defineProperty(e.prototype,"length",{get:function(){return this.width*this.height},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"dimensionNumber",{get:function(){return this.channelNumber},enumerable:!1,configurable:!0}),e}(e),l=function(){function t(t){this.opts={byIntensity:!1,colors:3},t&&this.setOpts(t),this.updateKmeans()}return t.prototype.updateKmeans=function(){this.kmeans=new u({clusterNumber:Array.isArray(this.opts.colors)?this.opts.colors.length:this.opts.colors,maxIterations:10})},t.prototype.setOpts=function(t){this.opts=Object.assign(this.opts,t),this.updateKmeans()},t.prototype.run=function(t){var e=this,n=new c(this.opts.byIntensity?t.toGrayScale():t);return this.kmeans.run(n).then((function(t){var r=t.clusters,o=t.centroids,i=e.opts.byIntensity?n.toMultiChannel(3):n;if(Array.isArray(e.opts.colors))for(s=0;s<i.width*i.height;s++)i.pixels[3*s]=e.opts.colors[r[s]][0],i.pixels[3*s+1]=e.opts.colors[r[s]][1],i.pixels[3*s+2]=e.opts.colors[r[s]][2];else for(var s=0;s<i.width*i.height;s++)i.pixels[3*s]=o[r[s]][0],i.pixels[3*s+1]=o[r[s]][e.opts.byIntensity?0:1],i.pixels[3*s+2]=o[r[s]][e.opts.byIntensity?0:2];return i}))},t}(),d=800,g=function(){function t(){var t=this;this.ELS={app:document.getElementById("app"),overlay:document.getElementById("overlay"),input:document.getElementById("input"),imageInput:document.getElementById("imageInput"),loadImage:document.getElementById("loadImage"),loadImage2:document.getElementById("loadImage2"),undo:document.getElementById("undo"),redo:document.getElementById("redo"),grayscale:document.getElementById("grayscale"),sobel:document.getElementById("sobel"),popups:{kernel:{open:document.getElementById("kernelOpen"),popup:document.getElementById("kernelPopup"),size:document.getElementById("kernelOptionsSize"),matrix:document.getElementById("kernelOptionsMatrix"),apply:document.getElementById("kernelApply"),cancel:document.getElementById("kernelCancel"),error:document.getElementById("kernelError"),transpose:document.getElementById("kernelTranspose")},gauss:{open:document.getElementById("gaussOpen"),popup:document.getElementById("gaussPopup"),size:document.getElementById("gaussSize"),sigma:document.getElementById("gaussSigma"),apply:document.getElementById("gaussApply"),cancel:document.getElementById("gaussCancel"),error:document.getElementById("gaussError")},canny:{open:document.getElementById("cannyOpen"),popup:document.getElementById("cannyPopup"),low:document.getElementById("cannyLow"),high:document.getElementById("cannyHigh"),size:document.getElementById("cannyGaussSize"),sigma:document.getElementById("cannyGaussSigma"),apply:document.getElementById("cannyApply"),cancel:document.getElementById("cannyCancel"),error:document.getElementById("cannyError")},segment:{open:document.getElementById("segmentOpen"),popup:document.getElementById("segmentPopup"),number:document.getElementById("segmentNumber"),rgb:document.getElementById("segmentRGB"),intensity:document.getElementById("segmentIntensity"),apply:document.getElementById("segmentApply"),cancel:document.getElementById("segmentCancel"),error:document.getElementById("segmentError")},compress:{open:document.getElementById("compressOpen"),popup:document.getElementById("compressPopup"),depth:document.getElementById("compressDepth"),apply:document.getElementById("compressApply"),cancel:document.getElementById("compressCancel"),error:document.getElementById("compressError")}}},this.gauss=new s,this.canny=new p,this.segmentation=new l,this.compression=new l,this.history=[],this.hide(this.ELS.overlay),Object.keys(this.ELS.popups).forEach((function(e){var n=t.ELS.popups[e];t.hide(n.popup),t.hide(n.error),n.open.onclick=function(){return t.showPopup(n.popup)},n.cancel.onclick=function(){return t.hidePopup(n.popup)}})),this.ELS.undo.onclick=function(){return t.undo()},this.ELS.redo.onclick=function(){return t.redo()},document.addEventListener("keydown",(function(e){e.ctrlKey&&"z"===e.key&&t.undo()})),document.addEventListener("keydown",(function(e){e.ctrlKey&&"y"===e.key&&t.redo()})),this.ELS.grayscale.onclick=function(){t.do((function(){return t.renderImage(t.ELS.input,e.fromImageData(t.getImageData(t.ELS.input)))}))};var n=function(){try{t.hide(t.ELS.popups.gauss.error);var e=parseInt(t.ELS.popups.gauss.size.value,10),n=parseFloat(t.ELS.popups.gauss.sigma.value);t.gauss.setOpts({sigma:n,n:e})}catch(e){t.ELS.popups.gauss.error.innerText=e,t.show(t.ELS.popups.gauss.error)}},o=function(){try{t.hide(t.ELS.popups.canny.error);var e=parseInt(t.ELS.popups.canny.size.value,10),n=parseFloat(t.ELS.popups.canny.sigma.value),r=parseFloat(t.ELS.popups.canny.low.value),o=parseFloat(t.ELS.popups.canny.high.value);t.canny.setOpts({lowThresholdRatio:r,highThresholdRatio:o,gaussianBlurOpts:{n:e,sigma:n}})}catch(e){t.ELS.popups.canny.error.innerText=e,t.show(t.ELS.popups.canny.error)}},u=function(){try{t.hide(t.ELS.popups.segment.error);var e=parseInt(t.ELS.popups.segment.number.value,10);if("number"!=typeof e||!Number.isInteger(e))throw new Error("Segment number should be an integer.");var n=t.ELS.popups.segment.rgb.checked;t.segmentation.setOpts({colors:Array.from({length:e},(function(){return[r(255,10),r(255,10),r(255,10)]})),byIntensity:!n})}catch(e){t.ELS.popups.segment.error.innerText=e,t.show(t.ELS.popups.segment.error)}};this.ELS.popups.compress.depth.onkeyup=function(){try{t.hide(t.ELS.popups.compress.error);var e=parseInt(t.ELS.popups.compress.depth.value,10);if("number"!=typeof e||!Number.isInteger(e))throw new Error("Color depth should be an integer.");t.compression.setOpts({colors:Math.pow(2,e)})}catch(e){t.ELS.popups.compress.error.innerText=e,t.show(t.ELS.popups.compress.error)}},this.ELS.popups.segment.number.onkeyup=u,this.ELS.popups.segment.rgb.onchange=u,this.ELS.popups.segment.intensity.onchange=u,this.ELS.popups.canny.sigma.onkeyup=o,this.ELS.popups.canny.size.onkeyup=o,this.ELS.popups.canny.low.onkeyup=o,this.ELS.popups.canny.high.onkeyup=o,this.ELS.popups.gauss.sigma.onkeyup=n,this.ELS.popups.gauss.size.onkeyup=n,this.ELS.popups.kernel.transpose.onclick=function(){t.kernel.matrix.transpose();for(var e=0;e<t.kernel.size;e++)for(var n=0;n<t.kernel.size;n++)document.getElementById("kernelCell_"+e+"_"+n).value=""+t.kernel.matrix.get(e,n)},this.ELS.popups.kernel.size.onkeyup=function(){t.hide(t.ELS.popups.kernel.error);var e=parseInt(t.ELS.popups.kernel.size.value,10);if("number"!=typeof e||e%2==0||e<3)return t.ELS.popups.kernel.error.innerText="Kernel size should be an odd number greater than 3.",void t.show(t.ELS.popups.kernel.error);var n=new i(e,e,0);n.set((e-1)/2,(e-1)/2,1),t.kernel={matrix:n,size:e},t.ELS.popups.kernel.matrix.innerHTML="";for(var r=function(r){t.ELS.popups.kernel.matrix.appendChild(t.createElement('\n                <div class="d-flex">\n                    '+new Array(e).fill(void 0).map((function(t,e){return'<div>\n                            <input id="kernelCell_'+r+"_"+e+'" type="text" class="form-control text-center" onchange="" value="'+n.get(r,e)+'">\n                        </div>'})).join("")+"\n                </div>\n            "))},o=0;o<e;o++)r(o);var s=function(t){for(var r=function(e){var r=document.getElementById("kernelCell_"+t+"_"+e);r&&(r.onchange=function(){n.set(t,e,parseFloat(r.value))})},o=0;o<e;o++)r(o)};for(o=0;o<e;o++)s(o)},this.ELS.popups.compress.apply.onclick=function(){t.hidePopup(t.ELS.popups.compress.popup),t.compression.run(e.fromImageData(t.getImageData(t.ELS.input),3)).then((function(e){return t.do((function(){return t.renderImage(t.ELS.input,e)}))})).catch((function(t){return alert(t)}))},this.ELS.popups.segment.apply.onclick=function(){t.hidePopup(t.ELS.popups.segment.popup),u(),t.segmentation.run(e.fromImageData(t.getImageData(t.ELS.input),3)).then((function(e){return t.do((function(){return t.renderImage(t.ELS.input,e)}))})).catch((function(t){return alert(t)}))},this.ELS.popups.kernel.apply.onclick=function(){t.hidePopup(t.ELS.popups.kernel.popup),t.kernel.matrix.run(e.fromImageData(t.getImageData(t.ELS.input),3)).then((function(e){return t.do((function(){return t.renderImage(t.ELS.input,e)}))})).catch((function(t){return alert(t)}))},this.ELS.popups.gauss.apply.onclick=function(){t.hidePopup(t.ELS.popups.gauss.popup),t.gauss.run(e.fromImageData(t.getImageData(t.ELS.input),3)).then((function(e){return t.do((function(){return t.renderImage(t.ELS.input,e)}))})).catch((function(t){return alert(t)}))},this.ELS.sobel.onclick=function(){t.hidePopup(t.ELS.popups.gauss.popup),(new a).run(e.fromImageData(t.getImageData(t.ELS.input),3)).then((function(e){var n=e.g;return t.do((function(){return t.renderImage(t.ELS.input,n)}))})).catch((function(t){return alert(t)}))},this.ELS.popups.canny.apply.onclick=function(){t.hidePopup(t.ELS.popups.canny.popup),t.canny.run(e.fromImageData(t.getImageData(t.ELS.input),3)).then((function(e){return t.do((function(){return t.renderImage(t.ELS.input,e)}))})).catch((function(t){return alert(t)}))},this.ELS.popups.kernel.size.dispatchEvent(new Event("keyup")),this.ELS.popups.gauss.size.dispatchEvent(new Event("keyup")),this.ELS.popups.segment.number.dispatchEvent(new Event("keyup")),this.ELS.popups.compress.depth.dispatchEvent(new Event("keyup")),[this.ELS.input].forEach((function(e){e.width=d,e.height=d,e.onwheel=function(t){var n;null===(n=e.getContext("2d"))||void 0===n||n.scale(2,2)},t.clearCanvas(e)})),this.ELS.loadImage.onclick=function(){return t.ELS.imageInput.click()},this.ELS.loadImage2.onclick=function(){return t.ELS.imageInput.click()},this.ELS.imageInput.onchange=function(){var n;t.ELS.grayscale.disabled=!1,t.ELS.sobel.disabled=!1,t.ELS.loadImage2.style.display="none",Object.keys(t.ELS.popups).forEach((function(e){t.ELS.popups[e].open.disabled=!1}));var r=null===(n=t.ELS.imageInput.files)||void 0===n?void 0:n[0],o=new FileReader;o.readAsDataURL(r),o.onload=function(){var n=document.createElement("img");n.src=o.result.toString(),n.onload=function(){t.imageWidth=n.naturalWidth,t.imageHeight=n.naturalHeight,(t.imageWidth>d||t.imageHeight>d)&&(t.imageWidth>t.imageHeight?(t.imageHeight=t.imageHeight*(d/t.imageWidth),t.imageWidth=d):(t.imageWidth=t.imageWidth*(d/t.imageHeight),t.imageHeight=d)),t.renderImage(t.ELS.input,n),t.history=[e.fromImageData(t.getImageData(t.ELS.input),3)],t.historyIndex=0,t.ELS.imageInput.value=""}}}}return t.prototype.createElement=function(t){var e=document.createElement("div");return e.innerHTML=t.trim(),e.firstChild},t.prototype.show=function(t){null==t||t.classList.remove("hidden")},t.prototype.hide=function(t){null==t||t.classList.add("hidden")},t.prototype.showPopup=function(t){this.show(t),this.show(this.ELS.overlay)},t.prototype.hidePopup=function(t){this.hide(t),this.hide(this.ELS.overlay)},t.prototype.do=function(t){this.historyIndex!==this.history.length-1&&(this.history=this.history.slice(0,this.historyIndex+1)),t(),this.history.push(e.fromImageData(this.getImageData(this.ELS.input),3)),this.historyIndex++,this.ELS.redo.disabled=!0,this.ELS.undo.disabled=!1},t.prototype.undo=function(){this.historyIndex>0?(this.historyIndex--,this.renderImage(this.ELS.input,this.history[this.historyIndex]),this.historyIndex<1&&(this.ELS.undo.disabled=!0),this.historyIndex<this.history.length-1&&(this.ELS.redo.disabled=!1)):new Audio("https://mygit.th-deg.de/hz29287/image.js/-/blob/master/public/alert.mp3").play()},t.prototype.redo=function(){this.historyIndex<this.history.length-1?(this.historyIndex++,this.renderImage(this.ELS.input,this.history[this.historyIndex]),this.historyIndex===this.history.length-1&&(this.ELS.redo.disabled=!0),this.historyIndex>0&&(this.ELS.undo.disabled=!1)):new Audio("/alert.mp3").play()},t.prototype.clearCanvas=function(t){var e=t.getContext("2d");e.fillStyle="#ccc",e.fillRect(0,0,t.width,t.height)},t.prototype.getImageData=function(t){return t.getContext("2d").getImageData((d-this.imageWidth)/2,(d-this.imageHeight)/2,this.imageWidth,this.imageHeight)},t.prototype.renderImage=function(t,e){this.clearCanvas(t);var n=t.getContext("2d"),r=(d-this.imageWidth)/2,o=(d-this.imageHeight)/2;e instanceof HTMLImageElement?n.drawImage(e,r,o,this.imageWidth,this.imageHeight):n.putImageData(e.toImageData(),r,o)},t}();document.addEventListener("DOMContentLoaded",(function(){var t=new g;window.app=t}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,